// Mocks generated by Mockito 5.0.10 from annotations
// in amanna/test/sync/tag_synchronizer_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:amanna/api/api.dart' as _i3;
import 'package:amanna/api/tag_response.dart' as _i6;
import 'package:amanna/models/quote.dart' as _i5;
import 'package:amanna/models/tag.dart' as _i8;
import 'package:amanna/repositories/tag_repository.dart' as _i7;
import 'package:dio/src/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDio extends _i1.Fake implements _i2.Dio {}

/// A class which mocks [API].
///
/// See the documentation for Mockito's code generation for more information.
class MockAPI extends _i1.Mock implements _i3.API {
  MockAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio())
          as _i2.Dio);
  @override
  _i4.Future<_i5.Quote?> getQuoteByTag(String? tag) =>
      (super.noSuchMethod(Invocation.method(#getQuoteByTag, [tag]),
          returnValue: Future<_i5.Quote?>.value()) as _i4.Future<_i5.Quote?>);
  @override
  _i4.Future<List<_i6.TagResponse>> getTags() => (super.noSuchMethod(
          Invocation.method(#getTags, []),
          returnValue: Future<List<_i6.TagResponse>>.value(<_i6.TagResponse>[]))
      as _i4.Future<List<_i6.TagResponse>>);
}

/// A class which mocks [TagRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagRepository extends _i1.Mock implements _i7.TagRepository {
  MockTagRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> save(_i8.Tag? tag) =>
      (super.noSuchMethod(Invocation.method(#save, [tag]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i8.Tag>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: Future<List<_i8.Tag>>.value(<_i8.Tag>[]))
          as _i4.Future<List<_i8.Tag>>);
}
